{"version":3,"sources":["webpack:///node_modules/@capacitor/filesystem/dist/esm/web.js","webpack:///node_modules/@capacitor/storage/dist/esm/web.js","webpack:///node_modules/@capacitor/camera/dist/esm/web.js"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","arguments","DB_VERSION","DB_NAME","_writeCmds","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","store","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","getPath","dbRequest","entry","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","dbIndexRequest","IDBKeyRange","only","entries","depth","match","fullPath","readdir","readDirResult","files","entryPath","stat","entryObj","deleteFile","rmdir","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","readFile","file","writeFile","contents","filename","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","_debug","StorageWeb","group","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","k","prefix","migrated","existing","oldprefix","Object","oldkey","_a","get","currentValue","set","localStorage","CameraWeb","webUseInput","source","Photos","fileInputExperience","Prompt","actionSheet","document","querySelector","createElement","body","appendChild","header","promptLabelHeader","cancelable","title","promptLabelPhoto","promptLabelPicture","addEventListener","selection","detail","cameraExperience","_options","multipleFileInputExperience","customElements","cameraModal","facingMode","direction","Front","componentOnReady","photo","_getCameraPhoto","dismiss","removeChild","present","input","cleanup","parentNode","id","hidden","_e","format","resultType","reader","FileReader","dataUrl","b64","base64String","readAsDataURL","webPath","URL","createObjectURL","accept","capture","removeAttribute","Rear","click","multiple","photos","i","saved","onloadend","r","navigator","permissions","query","name","permission","camera","state","unimplemented","Camera"],"mappings":"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","file":"web-es5.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    async removeOld() {\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            this.impl.removeItem(oldkey);\n        }\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n//# sourceMappingURL=web.js.map","import { WebPlugin, CapacitorException } from '@capacitor/core';\nimport { CameraSource, CameraDirection } from './definitions';\nexport class CameraWeb extends WebPlugin {\n    async getPhoto(options) {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            if (options.webUseInput || options.source === CameraSource.Photos) {\n                this.fileInputExperience(options, resolve);\n            }\n            else if (options.source === CameraSource.Prompt) {\n                let actionSheet = document.querySelector('pwa-action-sheet');\n                if (!actionSheet) {\n                    actionSheet = document.createElement('pwa-action-sheet');\n                    document.body.appendChild(actionSheet);\n                }\n                actionSheet.header = options.promptLabelHeader || 'Photo';\n                actionSheet.cancelable = false;\n                actionSheet.options = [\n                    { title: options.promptLabelPhoto || 'From Photos' },\n                    { title: options.promptLabelPicture || 'Take Picture' },\n                ];\n                actionSheet.addEventListener('onSelection', async (e) => {\n                    const selection = e.detail;\n                    if (selection === 0) {\n                        this.fileInputExperience(options, resolve);\n                    }\n                    else {\n                        this.cameraExperience(options, resolve, reject);\n                    }\n                });\n            }\n            else {\n                this.cameraExperience(options, resolve, reject);\n            }\n        });\n    }\n    async pickImages(_options) {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve) => {\n            this.multipleFileInputExperience(resolve);\n        });\n    }\n    async cameraExperience(options, resolve, reject) {\n        if (customElements.get('pwa-camera-modal')) {\n            const cameraModal = document.createElement('pwa-camera-modal');\n            cameraModal.facingMode =\n                options.direction === CameraDirection.Front ? 'user' : 'environment';\n            document.body.appendChild(cameraModal);\n            try {\n                await cameraModal.componentOnReady();\n                cameraModal.addEventListener('onPhoto', async (e) => {\n                    const photo = e.detail;\n                    if (photo === null) {\n                        reject(new CapacitorException('User cancelled photos app'));\n                    }\n                    else if (photo instanceof Error) {\n                        reject(photo);\n                    }\n                    else {\n                        resolve(await this._getCameraPhoto(photo, options));\n                    }\n                    cameraModal.dismiss();\n                    document.body.removeChild(cameraModal);\n                });\n                cameraModal.present();\n            }\n            catch (e) {\n                this.fileInputExperience(options, resolve);\n            }\n        }\n        else {\n            console.error(`Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/pwa-elements.`);\n            this.fileInputExperience(options, resolve);\n        }\n    }\n    fileInputExperience(options, resolve) {\n        let input = document.querySelector('#_capacitor-camera-input');\n        const cleanup = () => {\n            var _a;\n            (_a = input.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(input);\n        };\n        if (!input) {\n            input = document.createElement('input');\n            input.id = '_capacitor-camera-input';\n            input.type = 'file';\n            input.hidden = true;\n            document.body.appendChild(input);\n            input.addEventListener('change', (_e) => {\n                const file = input.files[0];\n                let format = 'jpeg';\n                if (file.type === 'image/png') {\n                    format = 'png';\n                }\n                else if (file.type === 'image/gif') {\n                    format = 'gif';\n                }\n                if (options.resultType === 'dataUrl' ||\n                    options.resultType === 'base64') {\n                    const reader = new FileReader();\n                    reader.addEventListener('load', () => {\n                        if (options.resultType === 'dataUrl') {\n                            resolve({\n                                dataUrl: reader.result,\n                                format,\n                            });\n                        }\n                        else if (options.resultType === 'base64') {\n                            const b64 = reader.result.split(',')[1];\n                            resolve({\n                                base64String: b64,\n                                format,\n                            });\n                        }\n                        cleanup();\n                    });\n                    reader.readAsDataURL(file);\n                }\n                else {\n                    resolve({\n                        webPath: URL.createObjectURL(file),\n                        format: format,\n                    });\n                    cleanup();\n                }\n            });\n        }\n        input.accept = 'image/*';\n        input.capture = true;\n        if (options.source === CameraSource.Photos ||\n            options.source === CameraSource.Prompt) {\n            input.removeAttribute('capture');\n        }\n        else if (options.direction === CameraDirection.Front) {\n            input.capture = 'user';\n        }\n        else if (options.direction === CameraDirection.Rear) {\n            input.capture = 'environment';\n        }\n        input.click();\n    }\n    multipleFileInputExperience(resolve) {\n        let input = document.querySelector('#_capacitor-camera-input-multiple');\n        const cleanup = () => {\n            var _a;\n            (_a = input.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(input);\n        };\n        if (!input) {\n            input = document.createElement('input');\n            input.id = '_capacitor-camera-input-multiple';\n            input.type = 'file';\n            input.hidden = true;\n            input.multiple = true;\n            document.body.appendChild(input);\n            input.addEventListener('change', (_e) => {\n                const photos = [];\n                // eslint-disable-next-line @typescript-eslint/prefer-for-of\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    let format = 'jpeg';\n                    if (file.type === 'image/png') {\n                        format = 'png';\n                    }\n                    else if (file.type === 'image/gif') {\n                        format = 'gif';\n                    }\n                    photos.push({\n                        webPath: URL.createObjectURL(file),\n                        format: format,\n                    });\n                }\n                resolve({ photos });\n                cleanup();\n            });\n        }\n        input.accept = 'image/*';\n        input.click();\n    }\n    _getCameraPhoto(photo, options) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            const format = photo.type.split('/')[1];\n            if (options.resultType === 'uri') {\n                resolve({\n                    webPath: URL.createObjectURL(photo),\n                    format: format,\n                    saved: false,\n                });\n            }\n            else {\n                reader.readAsDataURL(photo);\n                reader.onloadend = () => {\n                    const r = reader.result;\n                    if (options.resultType === 'dataUrl') {\n                        resolve({\n                            dataUrl: r,\n                            format: format,\n                            saved: false,\n                        });\n                    }\n                    else {\n                        resolve({\n                            base64String: r.split(',')[1],\n                            format: format,\n                            saved: false,\n                        });\n                    }\n                };\n                reader.onerror = e => {\n                    reject(e);\n                };\n            }\n        });\n    }\n    async checkPermissions() {\n        if (typeof navigator === 'undefined' || !navigator.permissions) {\n            throw this.unavailable('Permissions API not available in this browser');\n        }\n        try {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\n            // the specific permissions that are supported varies among browsers that implement the\n            // permissions API, so we need a try/catch in case 'camera' is invalid\n            const permission = await window.navigator.permissions.query({\n                name: 'camera',\n            });\n            return {\n                camera: permission.state,\n                photos: 'granted',\n            };\n        }\n        catch (_a) {\n            throw this.unavailable('Camera permissions are not available in this browser');\n        }\n    }\n    async requestPermissions() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\nconst Camera = new CameraWeb();\nexport { Camera };\n//# sourceMappingURL=web.js.map"]}